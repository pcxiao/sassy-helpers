#!/usr/bin/env ruby

# Combine multiple models into one

require 'rubygems'
require 'bundler/setup'

require 'optparse'
require 'sassy-helpers'

options = {
	:execute => false
}

OptionParser.new do |opts|
	opts.banner = "Usage: sassycombine [files] [options]"

	opts.on("--output NAME", String, "Output base name -- must be specified to write something") do |n|
        options[:output] = n
    end
	
	# Coupling Parameters
	# -------------------
	#
	# These may be parameters in each model, and will be turned 
	# into species. Note that the models must be specified in the
	# right order: The model which assigns a value to the coupling 
	# parameter must come last (since after this point, the parameter
	# will be turned into a species which cannot be overwritten without
	# an error)
	#Â 
	# each of these must be a triple like this:
	#
	#   2:para:y1
	#
	# makes a species from parameter "para", and uses the equation from
	# species y1 in model 2 (the second model that was read)

	opts.on("--couple x,y,z", Array, "List of coupling parameters") do |list|
		couplings = {}
		list.each do |d|
			d.match(/([0-9]+)\:([A-Za-z0-9\_]+)\:([A-Za-z0-9\_]+)/) do |m|
				if couplings[$1].nil?
					couplings[$1] = []
				end
				couplings[$1].push({ :parameter => $2, :species => $3 })
			end
			if couplings.length == 0 then 
				raise "Coupling parameters must be specified as <model>:<parameter>:<species> blocks, e.g. 2:para:y2!"
			end
			options[:couplings] = couplings
		end
	end
	
	opts.on_tail("-h", "--help", "Show this message") do
        puts opts
        exit
    end

    opts.on_tail("--version", "Show version") do
        puts SassyHelpers::VERSION + "\n"
        exit
    end
end.parse!

ix = ARGV.index {|o| o.match(/^\-/)}
if ix
	files = ARGV[0..ix]
else
	files = ARGV
end

p options

raise "No inputs specified" if files.length == 0

m = Modelling::Model.new

# files.each do |f|
# 	m.from_sassy(f)

# 	params = m.parameters.keys

# end
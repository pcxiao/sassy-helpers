#!/usr/bin/env ruby

# Combine multiple models into one

require 'rubygems'
require 'bundler/setup'

require 'optparse'
require 'sassy-helpers'

begin

	options = {
		:outformat => 'sassy',
		:format => 'xpp',
		:unparam => [],
		:param => nil
	}

	OptionParser.new do |opts|
		opts.banner = "Usage: sassyconvert [in] [out] [options]"

		opts.on("--outformat NAME", String, "Output format: sassy|xpp") do |n|
	        options[:outformat] = n
	    end

		opts.on("--informat NAME", String, "Input format: sassy|xpp|sbml") do |n|
	        options[:format] = n
	    end

		opts.on_tail("-h", "--help", "Show this message") do
	        puts opts
	        exit
	    end
		opts.on("--unparameterize x,y,z", Array, "Parameters to remove") do |list|
        	options[:unparam] = list
      	end
		opts.on("--unparameterize-but x,y,z", Array, "Parameters to keep (remove all others)") do |list|
        	options[:param] = list
      	end
	    opts.on_tail("--version", "Show version") do
	        puts SassyHelpers::VERSION + "\n"
	        exit
	    end
	end.parse!

	ix = ARGV.index {|o| o.match(/^\-/)}
	if ix
		files = ARGV[0..ix]
	else
		files = ARGV
	end

	p options

	raise "One input must be specified" if files.length < 1
	raise "One output must be specified" if files.length < 2

	m = Modelling::Model.new

	puts "Reading #{files[0]}\n"

	case options[:format]
	when 'sassy'
		m.from_sassy(files[0])
	when 'xpp', 'ode'
		m.from_xpp(files[0])
	else
		raise "Unknown input format #{options[:format]}\n"
	end

	if not options[:param].nil?
		options[:unparam] = m.parameters.keys.reject { |k| (not options[:param].index(k).nil?) }
	end

	options[:unparam].each do |par|
		m.unparameterize(par)
	end

	puts "Writing #{files[1]}\n"

	case options[:outformat]
	when 'sassy'
		m.to_sassy(files[1])
	when 'xpp', 'ode'
		m.to_xpp(files[1])
	when 'sbml', 'xml'
		m.to_sbml(files[1])
	when 'vf', 'vfgen'
		m.to_vfgen(files[1])
	when 'cpp'
		m.to_cpp(files[1])
	else
		raise "Unknown output format #{options[:outformat]}\n"
	end

	puts "done.\n"
rescue Exception => e
	if e.to_s != "Exit"
		puts "Error: #{e.to_s}\n"
		puts e.backtrace.join("\n")
	end
end

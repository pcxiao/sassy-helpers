# -*- encoding: utf-8 -*- 
require "modelling/sassyparser_extensions"
module Modelling
	# Sassy matlab file grammar
	grammar Sassy

		rule root 
			skip f:function skip
			e:evalp skip
			d:dydt skip <ParsedModelFile> {
				def value
					validate(f.value, e.value, d.value)
					{
						:fname => f.value[:name],
						:equations => d.value[:equations],
					}
				end
			}
		end

		# declare stuff that will be skipped
		# (comments and empty lines)
		rule skip
			(comment / ws)*
		end

		rule eof
		  !.
		end

		rule eoc
		  "\n" / eof
		end

		rule comment
			"%" c:((!eoc .)*) eoc {
				def value 
					c.text_value.strip
				end
			} / lcskip

		end

		# stuff that can be skipped within the same command
		rule lcskip
			"..." c:((!eoc .)*) eoc {
				def value 
					c.text_value.strip
				end
			}
		end

		rule ws 
			[\s]+ {
				def value
					""
				end
			}
		end

		rule lcws 
			(lcskip / comment / ws)+ {
				def value
					(elements.map {|el| el.value}).join (" ")
				end 
			}
		end

		# evaluate the parameter assignments statement
		rule evalp 
			"eval" lcws? idt:identtuple ";"? {
				def value
					idt.value
				end
			}
		end

		# dydt block
		rule dydt
			dd:ident lcws? "=" lcws? "[" eqns:equations "]" lcws? ";"? {
				def value
					{
						:dd => dd.text_value,
						:equations => eqns.value
					}
				end
			}
		end

		rule equations
			equation more:(';' equation)* {
				def value
					[ equation.value ].concat(more.elements.map do |sem_eq| 
						sem_eq.equation.value
					end).reject {|x| x[:equation].strip == ""}
				end
			}
		end

		# parse an equation
		rule equation
			equation_part+ {
				def value
					elements.inject({ :equation => "", :comments => "" }) {|memo, val| { 
						:equation => memo[:equation] + val.value[:equation], 
						:comments =>  memo[:comments] + val.value[:comments] } }
				end
			}
		end

		rule equation_part
			(comment / lcskip)+ {
				def value
				{
					:equation => "",
					:comments => ((elements.map {|el| el.value}).join (" "))
				}
				end
				} /
			ws {
				def value
				{
					:equation => "",
					:comments => ""
				}
				end

				} /
			[^;\]]+ {
				def value
				{
					:equation => text_value,
					:comments => ""
				}
				end
			} 
		end

		rule function
			"function" [\s]+ r:identlist [\s]* "=" [\s]* n:ident [\s]* p:identtuple {
				def value
					{
						:name => n.text_value,
						:parameters => p.value,
						:returns => r.value
					}
				end
			}
		end

		rule ident
			[a-zA-Z] [a-zA-Z\_0-9]* 
		end

		rule comma 
			[\s]* "," [\s]*
		end

		rule identlist
			("[" [\s]* "]") 1..1 {
				def value
					[]
				end			
			} / (ident) 1..1 {
				def value
					[text_value]
				end
			} / "[" [\s]* ident [\s]* "]"  {
				def value
					[ elements[2].text_value ]
				end
			} / "[" [\s]* ((ident ( comma ident )*)?) [\s]* "]" {
				def value
					elements[2].text_value.split(/\s*,\s*/)
				end			
			}
		end

		rule identtuple 
			"(" [\s]* ")" {
				def value
					[]
				end				
			} / "(" [\s]* a:ident [\s]* ")" {
				def value
					[a.text_value]
				end
			} / "(" [\s]* a:((ident ( comma ident )*)?) [\s]* ")" {
				def value
					a.text_value.split(/\s*,\s*/)
				end			
			}
		end
	end
end